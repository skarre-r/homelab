---
- name: "Setup homelab server"
  hosts: "homelab"
  tasks:
    # misc
    - name: "Make sure curl is installed"
      ansible.builtin.apt:
        name: "curl"
        state: "present"

    - name: "Make sure non-free apt repository exists"
      ansible.builtin.apt_repository:
        repo: "deb http://deb.debian.org/debian/ bookworm main non-free-firmware non-free"
        filename: "non-free"
        state: "present"

    - name: "Make sure intel driver(s) is installed"
      ansible.builtin.apt:
        name:
          - "intel-media-va-driver-non-free"
          - "vainfo"
          - "intel-gpu-tools"
          - "software-properties-common"
          - "firmware-misc-nonfree"
        state: "present"

    - name: "Configure LIBVA_DRIVER_NAME environment variable"
      ansible.builtin.lineinfile:
        path: "/etc/environment"
        state: "present"
        line: "LIBVA_DRIVER_NAME=iHD"
        search_string: "LIBVA_DRIVER_NAME="
      become: true

    # zfs:
    # - https://wiki.debian.org/ZFS
    # - https://openzfs.github.io/openzfs-docs/Getting%20Started/Debian/index.html
    - name: "Check if backports repository file exists"
      ansible.builtin.file:
        path: "/etc/apt/sources.list.d/bookworm-backports.list"
        state: "file"
      register: "bookworm_backports_file"
      ignore_errors: true

    - name: "Create backports repository file"
      ansible.builtin.file:
        path: "/etc/apt/sources.list.d/bookworm-backports.list"
        state: "touch"
        owner: "root"
        group: "root"
        mode: "0644"
      when: bookworm_backports_file.state == "absent"

    - name: "Make sure backports repository file is up-to-date"
      ansible.builtin.lineinfile:
        path: "/etc/apt/sources.list.d/bookworm-backports.list"
        state: "present"
        line: "{{ item.line }}"
      loop:
        - line: "deb http://deb.debian.org/debian bookworm-backports main contrib"
        - line: "deb-src http://deb.debian.org/debian bookworm-backports main contrib"

    - name: "Check if apt zfs preferences file exists"
      ansible.builtin.file:
        path: "/etc/apt/preferences.d/90_zfs"
        state: "file"
      register: "zfs_prefs_file"
      ignore_errors: true

    - name: "Create apt zfs preferences file"
      ansible.builtin.file:
        path: "/etc/apt/preferences.d/90_zfs"
        state: "touch"
        owner: "root"
        group: "root"
        mode: "0644"
      when: zfs_prefs_file.state == "absent"

    - name: "Make sure apt zfs preferences file is up-to-date"
      ansible.builtin.lineinfile:
        path: "/etc/apt/preferences.d/90_zfs"
        state: "present"
        line: "{{ item.line }}"
      loop:
        - line: "Package: src:zfs-linux"
        - line: "Pin: release n=bookworm-backports"
        - line: "Pin-Priority: 990"

    - name: "Check if zpool is installed"
      ansible.builtin.command:
        cmd: "which zpool"
      register: "which_zpool"
      changed_when: false
      failed_when: which_zpool.rc >= 2

    - name: "Install zfs packages"
      ansible.builtin.apt:
        name:
          - "dpkg-dev"
          - "linux-headers-generic"
          - "linux-image-generic"
          - "zfs-dkms"
          - "zfsutils-linux"
        state: "present"
        update_cache: true
      when: which_zpool.rc == 1
      notify:
        - "modprobe"

    - name: "Check zpool status"
      ansible.builtin.command:
        cmd: "zpool status"
      register: "zpool_status"
      changed_when: false

    - name: "Import zpool"
      ansible.builtin.command:
        cmd: "zpool import -f pool"
      become: true
      when: zpool_status.stderr == "no pools available"
      register: "zpool_import"
      changed_when: false

    - name: "Make sure zfs scrub cron job exists"
      ansible.builtin.file:
        path: "/etc/cron.d/zfsutils-linux"
        state: "file"

    # smb
    # - https://wiki.debian.org/Samba/ServerSimple
    - name: "Check if smb is installed"
      ansible.builtin.command:
        cmd: "which smbpasswd"
      register: "which_smb"
      changed_when: false
      failed_when: which_smb.rc >= 2

    - name: "Install smb packages"
      ansible.builtin.apt:
        name:
          - "samba"
          - "samba-client"
        state: "present"
      when: which_smb.rc == 1

    - name: "Update smb config file"
      ansible.builtin.copy:
        src: "smb.conf"
        dest: "/etc/samba/smb.conf"
        owner: "root"
        group: "root"
        mode: "0644"
      become: true
      notify: "smb_service"

    - name: "List smb users"
      ansible.builtin.command:
        cmd: "pdbedit -w -L"
      become: true
      register: "smb_users"
      changed_when: false

    - name: "Add smb user" # noqa: command-instead-of-shell
      ansible.builtin.shell:
        stdin: "{{ lookup('env', 'HOMELAB_PASSWORD') }}\n{{ lookup('env', 'HOMELAB_PASSWORD') }}\n"
        stdin_add_newline: false
        cmd: "smbpasswd -s -a homelab"
      become: true
      when: smb_users.stdout == ""
      changed_when: false

    # k3s
    - name: "Make sure k3s directory exists"
      ansible.builtin.file:
        path: "/etc/rancher/k3s"
        state: "directory"
        group: "root"
        owner: "root"
        mode: "0644"
      become: true

    - name: "Make sure k3s config file exists"
      ansible.builtin.copy:
        src: "k3s.config.yaml"
        dest: "/etc/rancher/k3s/config.yaml"
        owner: "root"
        group: "root"
        mode: "0644"
      become: true

    - name: "Check if k3s is installed"
      ansible.builtin.command:
        cmd: "which k3s"
      register: "which_k3s"
      changed_when: false
      failed_when: which_k3s.rc >= 2

    - name: "Download k3s installation script"
      ansible.builtin.get_url:
        url: "https://get.k3s.io"
        dest: "/tmp/k3s-install.sh"
        mode: "0777"
        force: false
      when: which_k3s.rc == 1

    - name: "Check if k3s installation script exists"
      ansible.builtin.stat:
        path: "/tmp/k3s-install.sh"
      register: "k3s_install_script"

    - name: "Run k3s installation script" # noqa: command-instead-of-shell
      ansible.builtin.shell:
        cmd: "sh /tmp/k3s-install.sh"
      environment:
        INSTALL_K3S_EXEC: "server"
        INSTALL_K3S_CHANNEL: "stable"
        K3S_CONFIG_FILE: "/etc/rancher/k3s/config.yaml"
      become: true
      changed_when: false
      when:
        - which_k3s.rc == 1
        - k3s_install_script.stat.exists

    - name: "Remove k3s installation script"
      ansible.builtin.file:
        path: "/tmp/k3s-install.sh"
        state: "absent"
      when: k3s_install_script.stat.exists

    - name: "Check if remote kubeconfig file exists"
      ansible.builtin.stat:
        path: "/etc/rancher/k3s/k3s.yaml"
      register: "remote_kubeconfig_file"

    - name: "Check if local kubeconfig file exists"
      ansible.builtin.stat:
        path: "{{ lookup('env', 'HOME') }}/.kube/config"
      vars:
        ansible_become: false
      delegate_to: "localhost"
      register: "local_kubeconfig_file"

    - name: "Fetch kubeconfig file"
      ansible.builtin.fetch:
        src: "/etc/rancher/k3s/k3s.yaml"
        dest: "{{ lookup('env', 'HOME') }}/.kube/config"
        flat: true
      when:
        - remote_kubeconfig_file.stat.exists
        - not local_kubeconfig_file.stat.exists

    - name: "Replace ip address in local kubeconfig file"
      ansible.builtin.lineinfile:
        path: "{{ lookup('env', 'HOME') }}/.kube/config"
        state: "present"
        line: "    server: https://192.168.1.21:6443"
        search_string: "server:"
      delegate_to: "localhost"
      vars:
        ansible_become: false

    - name: "Make sure k3s service is running"
      ansible.builtin.systemd_service:
        name: "k3s"
        enabled: true
        state: "started"
      become: true

    - name: "Configure KUBECONFIG environment variable"
      ansible.builtin.lineinfile:
        path: "/etc/environment"
        state: "present"
        line: "KUBECONFIG=/etc/rancher/k3s/k3s.yaml"
        search_string: "KUBECONFIG="
      become: true

    # k3s - helm
    - name: "Check if helm is installed"
      ansible.builtin.command:
        cmd: "which helm"
      register: "which_helm"
      changed_when: false
      failed_when: which_helm.rc >= 2

    - name: "Download helm installation script"
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3"
        dest: "/tmp/helm-install.sh"
        mode: "0700"
        force: false
      when: which_helm.rc == 1

    - name: "Check if helm installation script exists"
      ansible.builtin.stat:
        path: "/tmp/helm-install.sh"
      register: "helm_install_script"

    - name: "Run helm installation script" # noqa: command-instead-of-shell
      ansible.builtin.shell:
        cmd: "bash /tmp/helm-install.sh"
      become: true
      changed_when: false
      when:
        - which_helm.rc == 1
        - helm_install_script.stat.exists

    - name: "Remove k3s installation script"
      ansible.builtin.file:
        path: "/tmp/helm-install.sh"
        state: "absent"
      when: helm_install_script.stat.exists

  handlers:
    - name: "Modprobe zfs"
      ansible.builtin.command:
        cmd: "modprobe zfs"
      become: true
      listen: "modprobe"
      changed_when: false

    - name: "Restart smb service"
      ansible.builtin.systemd_service:
        name: "smbd"
        enabled: true
        state: "restarted"
      become: true
      listen: "smb_service"
