---
- name: "Setup Raspberry Pi #1"
  hosts: rpi1
  tasks:
    # apt
    - name: "Update apt packages"
      ansible.builtin.apt:
        force_apt_get: true
        autoclean: true
        autoremove: true
        update_cache: true
        upgrade: dist
      become: true

    - name: "Check reboot required"
      ansible.builtin.stat:
        path: "/var/run/reboot-required"
      register: stat_reboot_required

    - name: "Reboot?"
      ansible.builtin.reboot:
      when: stat_reboot_required.stat.exists

    # unbound
    - name: "Install unbound"
      ansible.builtin.apt:
        name: "unbound"
        state: "present"
      become: true

    - name: "Check if unbound is installed"
      ansible.builtin.command:
        cmd: "which unbound"
      become: true
      register: which_unbound
      changed_when: false
      failed_when: which_unbound.rc >= 2

    - name: "Make sure unbound service is enabled"
      ansible.builtin.service:
        name: "unbound"
        enabled: true
      become: true
      when: which_unbound.rc == 0

    - name: "Update unbound config file"
      ansible.builtin.copy:
        src: "unbound.conf"
        dest: "/etc/unbound/unbound.conf.d/pi-hole.conf"
        owner: "root"
        group: "root"
        mode: "0644"
      become: true
      register: unbound_config_file

    - name: "Disable unbound resolvconf service"
      ansible.builtin.service:
        name: "unbound-resolvconf"
        enabled: false
        state: "stopped"
      become: true
      when: which_unbound.rc == 0
      register: disable_resolvconf

    - name: "Check if resolvconf file exists"
      ansible.builtin.stat:
        path: "/etc/resolvconf.conf"
      become: true
      register: stat_resolvconf

    - name: "Update resolvconf file" # noqa: command-instead-of-module
      become: true
      ansible.builtin.command:
        cmd: "sed -Ei 's/^unbound_conf=/#unbound_conf=/' /etc/resolvconf.conf"
      when: stat_resolvconf.stat.exists
      register: update_resolvconf
      changed_when: false

    - name: "Remove unbound resolvconf file"
      ansible.builtin.file:
        path: "/etc/unbound/unbound.conf.d/resolvconf_resolvers.conf"
        state: "absent"
      become: true
      register: remove_unbound_resolvconf

    - name: "Restart unbound if config has changed"
      ansible.builtin.service:
        name: "unbound"
        state: "restarted"
      become: true
      when: which_unbound.rc == 0 and (unbound_config_file.changed or disable_resolvconf.changed or update_resolvconf.changed or remove_unbound_resolvconf.changed) # noqa: yaml[line-length]

    # pi-hole
    - name: "Make sure pihole user exists"
      ansible.builtin.user:
        name: "pihole"
        shell: "/usr/sbin/nologin"
        create_home: false
        force: false
        state: "present"
      become: true

    - name: "Check if pi-hole is installed"
      ansible.builtin.command:
        cmd: "which pihole"
      register: which_pihole
      changed_when: false
      failed_when: which_pihole.rc >= 2

    - name: "Debug pi-hole installation"
      ansible.builtin.debug:
        var: which_pihole.stdout

    - name: "Download pi-hole installation script"
      ansible.builtin.get_url:
        url: "https://install.pi-hole.net"
        dest: "/tmp/pihole-install.sh"
        mode: "0777"
        force: false
      when: which_pihole.rc == 1

    - name: "Check if pi-hole installation script exists"
      ansible.builtin.stat:
        path: "/tmp/pihole-install.sh"
      register: stat_pihole_install

    - name: "Make sure pi-hole directory exists"
      ansible.builtin.file:
        path: "/etc/pihole"
        state: "directory"
        group: "pihole"
        owner: "pihole"
        mode: "0644"
      become: true

    - name: "Make sure pi-hole setup vars file exists"
      become: true
      ansible.builtin.copy:
        dest: "/etc/pihole/setupVars.conf"
        force: false
        content: ""
        group: "pihole"
        owner: "pihole"
        mode: "0644"

    # TODO: pi-hole v6 changes???
    - name: "Set pi-hole setup vars"
      ansible.builtin.lineinfile:
        path: "/etc/pihole/setupVars.conf"
        state: "present"
        line: "{{ item.line }}"
        regexp: "{{ item.regexp }}"
        group: "pihole"
        owner: "pihole"
        mode: "0644"
      loop:
        - line: PIHOLE_INTERFACE=eth0
          regexp: ^PIHOLE_INTERFACE
        - line: IPV4_ADDRESS=192.168.1.11/24
          regexp: ^IPV4_ADDRESS
        - line: PIHOLE_DNS_1=127.0.0.1#5335
          regexp: ^PIHOLE_DNS_1
        - line: DNS_FQDN_REQUIRED=true
          regexp: ^DNS_FQDN_REQUIRED
        - line: DNS_BOGUS_PRIV=true
          regexp: ^DNS_BOGUS_PRIV
        - line: DNSSEC=true
          regexp: ^DNSSEC
        - line: CACHE_SIZE=10000
          regexp: ^CACHE_SIZE
        - line: QUERY_LOGGING=true
          regexp: ^QUERY_LOGGING
        - line: INSTALL_WEB_INTERFACE=true
          regexp: ^INSTALL_WEB_INTERFACE
        - line: LIGHTTPD_ENABLED=true
          regexp: ^LIGHTTPD_ENABLED
        - line: INSTALL_WEB_SERVER=true
          regexp: ^INSTALL_WEB_SERVER
        - line: BLOCKING_ENABLED=true
          regexp: ^BLOCKING_ENABLED
        - line: DNSMASQ_LISTENING=local
          regexp: ^DNSMASQ_LISTENING
        - line: REV_SERVER=true
          regexp: ^REV_SERVER=
        - line: REV_SERVER_CIDR=192.168.1.0/24
          regexp: ^REV_SERVER_CIDR
        - line: REV_SERVER_TARGET=192.168.1.1
          regexp: ^REV_SERVER_TARGET
        - line: REV_SERVER_DOMAIN=lan
          regexp: ^REV_SERVER_DOMAIN
        - line: WEBUIBOXEDLAYOUT=traditional
          regexp: ^WEBUIBOXEDLAYOUT
        - line: WEBTHEME=high-contrast-dark
          regexp: ^WEBTHEME
      become: true
      register: pihole_setupvars

    - name: "Run pi-hole installation script" # noqa: command-instead-of-shell
      ansible.builtin.shell:
        cmd: "bash /tmp/pihole-install.sh --unattended"
      become: true
      changed_when: false
      when:
        - which_pihole.rc == 1
        - stat_pihole_install.stat.exists

    - name: "Delete pi-hole installation script"
      ansible.builtin.file:
        path: "/tmp/pihole-install.sh"
        state: "absent"
      when:
        - which_pihole.rc == 0
        - stat_pihole_install.stat.exists

    - name: "Change pi-hole admin password"
      ansible.builtin.command:
        cmd: "pihole -a -p {{ lookup('env', 'RPI1_PIHOLE_PASSWORD') }}"
      when: which_pihole.rc == 0
      changed_when: false

    - name: "Restart pi-hole"
      ansible.builtin.command:
        cmd: "pihole restartdns"
      when:
        - which_pihole.rc == 0
        - pihole_setupvars.changed
      changed_when: false

    - name: "Make sure pi-hole service is enabled"
      ansible.builtin.service:
        name: "pihole-FTL"
        enabled: true
        state: "started"
      become: true
      when: which_pihole.rc == 0

    - name: "Update pi-hole"
      ansible.builtin.command:
        cmd: "pihole -up"
      when: which_pihole.rc == 0
      changed_when: false
